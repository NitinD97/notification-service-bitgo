// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (id, current_price, percent_change, volume, user_id, status)
VALUES ($1, $2, $3, $4, $5, 'PENDING')
`

type CreateNotificationParams struct {
	ID            uuid.UUID      `json:"id"`
	CurrentPrice  pgtype.Numeric `json:"current_price"`
	PercentChange pgtype.Numeric `json:"percent_change"`
	Volume        int32          `json:"volume"`
	UserID        uuid.UUID      `json:"user_id"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.Exec(ctx, createNotification,
		arg.ID,
		arg.CurrentPrice,
		arg.PercentChange,
		arg.Volume,
		arg.UserID,
	)
	return err
}

const getNotificationById = `-- name: GetNotificationById :one
SELECT id, current_price, percent_change, volume, user_id, status, created_at, updated_at, deleted_at
from notifications
where id = $1
`

func (q *Queries) GetNotificationById(ctx context.Context, id uuid.UUID) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationById, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CurrentPrice,
		&i.PercentChange,
		&i.Volume,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getNotificationsByUserId = `-- name: GetNotificationsByUserId :many
SELECT id, current_price, percent_change, volume, user_id, status, created_at, updated_at, deleted_at
from notifications
where user_id = $1
`

func (q *Queries) GetNotificationsByUserId(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.CurrentPrice,
			&i.PercentChange,
			&i.Volume,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationStatusById = `-- name: UpdateNotificationStatusById :exec
UPDATE notifications
SET status = $1
where id = $2
`

type UpdateNotificationStatusByIdParams struct {
	Status NotificationStatus `json:"status"`
	ID     uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateNotificationStatusById(ctx context.Context, arg UpdateNotificationStatusByIdParams) error {
	_, err := q.db.Exec(ctx, updateNotificationStatusById, arg.Status, arg.ID)
	return err
}
